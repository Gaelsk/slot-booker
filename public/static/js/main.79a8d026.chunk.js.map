{"version":3,"sources":["components/UserItem.js","hooks/useFetchUsers.js","components/SearchForm.js","pages/userslist.js","App.js","serviceWorker.js","index.js"],"names":["UserItem","_ref","user","fullname","concat","first_name","last_name","_useState","useState","_useState2","Object","slicedToArray","show","setshow","_useState3","_useState4","message","setMessage","_useState5","Date","_useState6","bookedFor","setBookedFor","react_default","a","createElement","Fragment","Card","className","Body","Image","roundedCircle","height","width","src","avatar","Button","onClick","Modal","onHide","Alert","translate","variant","ModalHeader","closeButton","ModalBody","email","Form","Group","react_datepicker_min_default","selected","onChange","date","data","booked","axios","post","then","res","setTimeout","ACTIONS","MAKE_REQUEST","GET_DATA","ERROR","BASE_URL","reducer","state","action","type","loading","users","objectSpread","payload","error","SearchForm","query","onQueryChange","Control","placeholder","value","UsersList","setQuery","_useFetchUsers","_useReducer","useReducer","_useReducer2","dispatch","useEffect","get","catch","e","useFetchUsers","users_list","setUsers_list","matched_users","filter","regExp","RegExp","match","Container","style","maxWidth","target","length","renderNotFoundMessage","Array","from","map","_","i","key","padding","App","react_router_dom","react_router","exact","path","component","userslist","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mWAgBe,SAASA,EAATC,GAA4B,IAARC,EAAQD,EAARC,KAC3BC,EAAQ,GAAAC,OAAMF,EAAKG,WAAX,KAAAD,OAAyBF,EAAKI,WADHC,EAEjBC,oBAAS,GAFQC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAElCK,EAFkCH,EAAA,GAE5BI,EAF4BJ,EAAA,GAAAK,EAGXN,mBAAS,IAHEO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAGlCE,EAHkCD,EAAA,GAGzBE,EAHyBF,EAAA,GAAAG,EAIPV,mBAAS,IAAIW,MAJNC,EAAAV,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAIlCG,EAJkCD,EAAA,GAIvBE,EAJuBF,EAAA,GAyBzC,OACEG,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,UAAU,iBACdL,EAAAC,EAAAC,cAACE,EAAA,EAAKE,KAAN,KACEN,EAAAC,EAAAC,cAACK,EAAA,EAAD,CACEC,eAAa,EACbC,OAAO,KACPC,MAAM,KACNL,UAAU,OACVM,IAAKhC,EAAKiC,SAEXhC,EACDoB,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAQR,UAAU,mBAAmBS,QAhC7C,WACExB,GAAQ,KA+BF,UAKJU,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAO1B,KAAMA,EAAM2B,OAlCvB,WACE1B,GAAQ,KAkCHG,GACCO,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAOC,UAAU,MAAMC,QAAQ,WAC5B1B,GAGLO,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAaC,aAAW,GACtBrB,EAAAC,EAAAC,cAAA,OAAKG,UAAU,yBAAf,gBAEFL,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAWjB,UAAU,sCACnBL,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAOC,eAAa,EAACC,OAAO,KAAKE,IAAKhC,EAAKiC,SAC3CZ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,QACbL,EAAAC,EAAAC,cAAA,WAAMtB,GACNoB,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBAAiB1B,EAAK4C,SAGzCvB,EAAAC,EAAAC,cAACsB,EAAA,EAAKC,MAAN,KACEzB,EAAAC,EAAAC,cAACwB,EAAAzB,EAAD,CACEI,UAAU,mCACVsB,SAAU7B,EACV8B,SAAU,SAAAC,GAAI,OAAI9B,EAAa8B,MAEjC7B,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAQR,UAAU,4BAA4BS,QArDtD,WACE,IAAMgB,EAAO,CACXnD,OACAoD,QAAQ,EACRjC,aAEFkC,IAAMC,KAAK,YAAaH,GAAMI,KAAK,SAAAC,GACjCzC,EAAW,6BACX0C,WAAW,WACT1C,EAAW,KACV,SA2CC,uBC7EJ2C,EAAU,CACdC,aAAc,eACdC,SAAU,WACVC,MAAO,SAGHC,EAAW,8BAEjB,SAASC,EAAQC,EAAOC,GACtB,OAAQA,EAAOC,MACb,KAAKR,EAAQC,aACX,MAAO,CAAEQ,SAAS,EAAMC,MAAO,IACjC,KAAKV,EAAQE,SACX,OAAOpD,OAAA6D,EAAA,EAAA7D,CAAA,GAAKwD,EAAZ,CAAmBG,SAAS,EAAOC,MAAOH,EAAOK,QAAQF,QAC3D,KAAKV,EAAQG,MACX,OAAOrD,OAAA6D,EAAA,EAAA7D,CAAA,GACFwD,EADL,CAEEG,SAAS,EACTI,MAAON,EAAOK,QAAQC,MACtBH,MAAO,KAGX,QACE,OAAOJ,GCxBE,SAASQ,EAATzE,GAA8C,IAAxB0E,EAAwB1E,EAAxB0E,MAAOC,EAAiB3E,EAAjB2E,cAC1C,OACErD,EAAAC,EAAAC,cAACsB,EAAA,EAAD,KACExB,EAAAC,EAAAC,cAACsB,EAAA,EAAKC,MAAN,KACEzB,EAAAC,EAAAC,cAACsB,EAAA,EAAK8B,QAAN,CACEC,YAAY,4BACZC,MAAOJ,EACPxB,SAAUyB,MCwCLI,MA3Cf,WAAqB,IAAAzE,EACOC,mBAAS,IADhBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACZoE,EADYlE,EAAA,GACLwE,EADKxE,EAAA,GAAAyE,EFwBN,WAAyB,IAAAC,EACZC,qBAAWnB,EAAS,CAAEK,MAAO,GAAID,SAAS,IAD9BgB,EAAA3E,OAAAC,EAAA,EAAAD,CAAAyE,EAAA,GAC/BjB,EAD+BmB,EAAA,GACxBC,EADwBD,EAAA,GAetC,OAZAE,oBAAU,WACRD,EAAS,CAAElB,KAAMR,EAAQC,eACzBN,IACGiC,IAAIxB,GACJP,KAAK,SAAAC,GACJ4B,EAAS,CAAElB,KAAMR,EAAQE,SAAUU,QAAS,CAAEF,MAAOZ,EAAIL,KAAKA,UAE/DoC,MAAM,SAAAC,GACLJ,EAAS,CAAElB,KAAMR,EAAQG,MAAOS,QAAS,CAAEC,MAAOiB,QAErD,IAEIxB,EErC2ByB,GAA1BrB,EAFWY,EAEXZ,MAAOD,EAFIa,EAEJb,QAASI,EAFLS,EAEKT,MAFL3D,EAGiBN,mBAAS8D,GAH1BvD,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAGZ8E,EAHY7E,EAAA,GAGA8E,EAHA9E,EAAA,GAwBnB,OAjBAwE,oBAAU,WACRM,EAAcvB,IACb,CAACA,IAEJiB,oBAAU,WACR,IAAMO,EAAgBxB,EAAMyB,OAAO,SAAA7F,GACjC,IAAM8F,EAAS,IAAIC,OAAOtB,EAAO,MACjC,OAAOzE,EAAKG,WAAW6F,MAAMF,IAAW9F,EAAKI,UAAU4F,MAAMF,KAE/DH,EAAcC,IACb,CAACnB,IAQFpD,EAAAC,EAAAC,cAAC0E,EAAA,EAAD,CAAWC,MAAO,CAAEC,SAAU,KAAOzE,UAAU,QAC7CL,EAAAC,EAAAC,cAAA,MAAIG,UAAU,cAAd,cACAL,EAAAC,EAAAC,cAACiD,EAAD,CAAYC,MAAOA,EAAOC,cAvB9B,SAA2Bc,GACzBT,EAASS,EAAEY,OAAOvB,UAcpB,WACE,GAAIJ,EAAM4B,OAAS,GAA0B,GAArBX,EAAWW,OACjC,OAAOhF,EAAAC,EAAAC,cAAA,6BAON+E,GACA/B,GAASlD,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAOE,QAAQ,UAAU+B,EAAMzD,SACxCqD,GACC9C,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACG+E,MAAMC,KAAK,CAAEH,OAAQ,IAAKI,IAAI,SAACC,EAAGC,GAAJ,OAC7BtF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMmF,IAAKD,EAAGjF,UAAU,OAAOwE,MAAO,CAAEW,QAAS,aAItDnB,EAAWe,IAAI,SAACzG,EAAM2G,GAAP,OACdtF,EAAAC,EAAAC,cAACzB,EAAD,CAAU8G,IAAKD,EAAG3G,KAAMA,QC5BjB8G,MAVf,WACE,OACEzF,EAAAC,EAAAC,cAACwF,EAAA,EAAD,KACE1F,EAAAC,EAAAC,cAACyF,EAAA,EAAD,KACE3F,EAAAC,EAAAC,cAACyF,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWC,OCErBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASxB,MACvB,2DCbNyB,IAASC,OAAOrG,EAAAC,EAAAC,cAACoG,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzE,KAAK,SAAA0E,GACjCA,EAAaC","file":"static/js/main.79a8d026.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\n  Card,\r\n  Image,\r\n  Button,\r\n  Modal,\r\n  ModalBody,\r\n  Alert,\r\n  Form\r\n} from \"react-bootstrap\";\r\nimport ModalHeader from \"react-bootstrap/esm/ModalHeader\";\r\nimport axios from \"axios\";\r\nimport DatePicker from \"react-datepicker\";\r\n\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nexport default function UserItem({ user }) {\r\n  const fullname = `${user.first_name} ${user.last_name}`;\r\n  const [show, setshow] = useState(false);\r\n  const [message, setMessage] = useState(\"\");\r\n  const [bookedFor, setBookedFor] = useState(new Date());\r\n  function openModal() {\r\n    setshow(true);\r\n  }\r\n  function closeModal() {\r\n    setshow(false);\r\n  }\r\n  function handleBook() {\r\n    const data = {\r\n      user,\r\n      booked: true,\r\n      bookedFor\r\n    };\r\n    axios.post(\"/bookings\", data).then(res => {\r\n      setMessage(\"Slot booked successfully!\");\r\n      setTimeout(() => {\r\n        setMessage(\"\");\r\n      }, 4000);\r\n    });\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Card className=\"mb-3 bg-white\">\r\n        <Card.Body>\r\n          <Image\r\n            roundedCircle\r\n            height=\"50\"\r\n            width=\"50\"\r\n            className=\"mr-3\"\r\n            src={user.avatar}\r\n          />\r\n          {fullname}\r\n          <Button className=\"float-right mt-2\" onClick={openModal}>\r\n            More\r\n          </Button>\r\n        </Card.Body>\r\n      </Card>\r\n      <Modal show={show} onHide={closeModal}>\r\n        {message && (\r\n          <Alert translate=\"yes\" variant=\"success\">\r\n            {message}\r\n          </Alert>\r\n        )}\r\n        <ModalHeader closeButton>\r\n          <div className=\"lead font-weight-bold\">Book a slot</div>\r\n        </ModalHeader>\r\n        <ModalBody className=\"bg-white d-flex align-items-center\">\r\n          <Image roundedCircle height=\"90\" src={user.avatar} />\r\n          <div className=\"ml-3\">\r\n            <div>{fullname}</div>\r\n            <div className=\"text-black-50\">{user.email}</div>\r\n          </div>\r\n        </ModalBody>\r\n        <Form.Group>\r\n          <DatePicker\r\n            className=\"ml-3 px-3 py-1 date-picker-input\"\r\n            selected={bookedFor}\r\n            onChange={date => setBookedFor(date)}\r\n          />\r\n          <Button className=\"ml-3 mb-1 book-submit-btn\" onClick={handleBook}>\r\n            Book\r\n          </Button>\r\n        </Form.Group>\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n","import { useReducer, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst ACTIONS = {\r\n  MAKE_REQUEST: \"MAKE_REQUEST\",\r\n  GET_DATA: \"GET_DATA\",\r\n  ERROR: \"ERROR\"\r\n};\r\n\r\nconst BASE_URL = \"https://reqres.in/api/users\";\r\n\r\nfunction reducer(state, action) {\r\n  switch (action.type) {\r\n    case ACTIONS.MAKE_REQUEST:\r\n      return { loading: true, users: [] };\r\n    case ACTIONS.GET_DATA:\r\n      return { ...state, loading: false, users: action.payload.users };\r\n    case ACTIONS.ERROR:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        error: action.payload.error,\r\n        users: []\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default function useFetchUsers() {\r\n  const [state, dispatch] = useReducer(reducer, { users: [], loading: true });\r\n\r\n  useEffect(() => {\r\n    dispatch({ type: ACTIONS.MAKE_REQUEST });\r\n    axios\r\n      .get(BASE_URL)\r\n      .then(res => {\r\n        dispatch({ type: ACTIONS.GET_DATA, payload: { users: res.data.data } });\r\n      })\r\n      .catch(e => {\r\n        dispatch({ type: ACTIONS.ERROR, payload: { error: e } });\r\n      });\r\n  }, []);\r\n\r\n  return state;\r\n}\r\n","import React from \"react\";\r\nimport { Form } from \"react-bootstrap\";\r\nexport default function SearchForm({ query, onQueryChange }) {\r\n  return (\r\n    <Form>\r\n      <Form.Group>\r\n        <Form.Control\r\n          placeholder=\"Search by name or surname\"\r\n          value={query}\r\n          onChange={onQueryChange}\r\n        ></Form.Control>\r\n      </Form.Group>\r\n    </Form>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Container, Card, Alert } from \"react-bootstrap\";\r\nimport UserItem from \"../components/UserItem\";\r\nimport useFetchUsers from \"../hooks/useFetchUsers\";\r\nimport SearchForm from \"../components/SearchForm\";\r\n\r\nfunction UsersList() {\r\n  const [query, setQuery] = useState(\"\");\r\n  const { users, loading, error } = useFetchUsers();\r\n  const [users_list, setUsers_list] = useState(users);\r\n  function handleQueryChange(e) {\r\n    setQuery(e.target.value);\r\n  }\r\n  useEffect(() => {\r\n    setUsers_list(users);\r\n  }, [users]);\r\n\r\n  useEffect(() => {\r\n    const matched_users = users.filter(user => {\r\n      const regExp = new RegExp(query, \"gi\");\r\n      return user.first_name.match(regExp) || user.last_name.match(regExp);\r\n    });\r\n    setUsers_list(matched_users);\r\n  }, [query]);\r\n\r\n  function renderNotFoundMessage() {\r\n    if (query.length > 0 && users_list.length == 0) {\r\n      return <div>User not found</div>;\r\n    }\r\n  }\r\n  return (\r\n    <Container style={{ maxWidth: 700 }} className=\"my-4\">\r\n      <h1 className=\"mb-4 title\">Users List</h1>\r\n      <SearchForm query={query} onQueryChange={handleQueryChange} />\r\n      {renderNotFoundMessage()}\r\n      {error && <Alert variant=\"danger\">{error.message}</Alert>}\r\n      {loading && (\r\n        <>\r\n          {Array.from({ length: 6 }).map((_, i) => (\r\n            <Card key={i} className=\"mb-3\" style={{ padding: \"2rem\" }} />\r\n          ))}\r\n        </>\r\n      )}\r\n      {users_list.map((user, i) => (\r\n        <UserItem key={i} user={user} />\r\n      ))}\r\n    </Container>\r\n  );\r\n}\r\nexport default UsersList;\r\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./style.css\";\nimport userslist from \"./pages/userslist\";\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\" component={userslist} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}